# .windsurf
# Custom execution rules for University SIS Project (Windows 11)
# Backend: Laravel PHP / Frontend: HTML, CSS, JS (with optional TailwindCSS via CDN)

permissions:
  allow_all_commands: true

restricted_commands:
  - php artisan migrate:fresh
  - php artisan migrate:reset
  - php artisan db:wipe
  - php artisan migrate:rollback
  - php artisan db:seed --force
  - php artisan migrate:fresh --seed

trusted_commands:
  - composer install
  - composer require spatie/laravel-permission
  - php artisan migrate
  - php artisan make:model
  - php artisan make:controller
  - php artisan make:migration
  - php artisan make:request
  - php artisan make:resource
  - php artisan route:list
  - npm install
  - npm run dev
  - npm run build
  - php artisan serve
  - php artisan storage:link
  - php artisan vendor:publish
  - php artisan make:notification
  - php artisan make:policy
  - php artisan make:middleware
  - php artisan make:event
  - php artisan make:listener
  - php artisan make:command
  - php artisan optimize
  - php artisan config:cache
  - npx tailwindcss init
  - DB.php (for database operations)
  

allowed_directories:
  - /backend
  - /public
  - /database
  - /routes
  - /storage
  - /resources
  - /logs
  - /frontend  # For static HTML/CSS/JS files

execution_behavior:
  allow_interactive_commands: true
  allow_external_package_install: true
  stop_on_error: false

pre_execution_checks:
  confirm_on_restricted_command: true
  confirm_message: "⚠️ The command you're trying to run is destructive. Confirm with Mohamed Saied before proceeding."

logging:
  enable_command_logs: true
  log_directory: /logs/windsurf
  log_command_history: true

safety_checks:
  check_malicious_commands: true
  validate_generated_code: true
  enforce_file_integrity: true

system:
  os: Windows 11
  project_type: University SIS (Laravel + HTML/CSS/JS)

coding_standards:
  follow_best_practices: true
  add_descriptive_comments: true
  use_clear_variable_names: true
  explain_code_concisely: true
  add_error_handling: true
  implement_intuitive_ui: true
  optimize_for_performance: true
  edit_one_file_at_a_time: true
  confirm_code_replacements:
    enabled: true
    instructions_required: true
  use_cdn_by_default: true

execution_protocols:
  verify_code_clarity: true
  explain_decisions: true
  log_code_changes: true
  confirm_major_changes: true

resource_validation:
  ensure_no_duplicate_features: true
  validation_strategy:
    - Before adding any new table, column, or feature:
        - Check if similar or equivalent functionality exists under a different name.
        - If duplicate or alternative implementation exists, select the optimal choice.
        - Remove or consolidate redundant structures.
        - Always log the decision rationale in a text file.

tinker_usage_rules:
  allowed_mode: none
  warning_message: |
    ⚠️ Tinker is disabled. Use php DB.php for any DB edits or inserts.

coding_conventions:
  enforce_laravel_syntax: true
  instructions: |
    ✅ Always use Laravel's built-in syntax, features, and helpers wherever possible — even if the file is non-Laravel or Laravel isn't explicitly required for that task.
    ✅ Use simplest Laravel-native methods for permissions and access control:
      - Use @can directive in Blade for permission checks.
      - Use hasPermissionTo() and hasRole() in controllers, policies, and middleware.
      - Avoid raw PHP permission handling or custom authorization logic.
    ✅ Prefer Laravel Collection methods, Eloquent relationships, and Query Builder functions.
    ✅ Do not overcomplicate logic — choose the most concise, clean, and native Laravel solution.

change_log:
  location: /
  file_type: .txt
  note_protocol: |
    For every change or backend modification:
      - Create or append to a .txt file in the project root.
      - Write a simple, human-readable note summarizing the change.
      - Example: "Added 'social_logins' table and Student ID generator via DB.php."
